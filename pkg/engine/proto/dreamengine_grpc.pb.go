// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dreamdatastream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DreamdatastreamClient is the client API for Dreamdatastream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DreamdatastreamClient interface {
	//The instance calls the API to make the connection!
	Data(ctx context.Context, opts ...grpc.CallOption) (Dreamdatastream_DataClient, error)
}

type dreamdatastreamClient struct {
	cc grpc.ClientConnInterface
}

func NewDreamdatastreamClient(cc grpc.ClientConnInterface) DreamdatastreamClient {
	return &dreamdatastreamClient{cc}
}

func (c *dreamdatastreamClient) Data(ctx context.Context, opts ...grpc.CallOption) (Dreamdatastream_DataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dreamdatastream_ServiceDesc.Streams[0], "/dreamdatastream.dreamdatastream/data", opts...)
	if err != nil {
		return nil, err
	}
	x := &dreamdatastreamDataClient{stream}
	return x, nil
}

type Dreamdatastream_DataClient interface {
	Send(*ClientToServer) error
	Recv() (*ServerToClient, error)
	grpc.ClientStream
}

type dreamdatastreamDataClient struct {
	grpc.ClientStream
}

func (x *dreamdatastreamDataClient) Send(m *ClientToServer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dreamdatastreamDataClient) Recv() (*ServerToClient, error) {
	m := new(ServerToClient)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DreamdatastreamServer is the server API for Dreamdatastream service.
// All implementations must embed UnimplementedDreamdatastreamServer
// for forward compatibility
type DreamdatastreamServer interface {
	//The instance calls the API to make the connection!
	Data(Dreamdatastream_DataServer) error
	mustEmbedUnimplementedDreamdatastreamServer()
}

// UnimplementedDreamdatastreamServer must be embedded to have forward compatible implementations.
type UnimplementedDreamdatastreamServer struct {
}

func (UnimplementedDreamdatastreamServer) Data(Dreamdatastream_DataServer) error {
	return status.Errorf(codes.Unimplemented, "method Data not implemented")
}
func (UnimplementedDreamdatastreamServer) mustEmbedUnimplementedDreamdatastreamServer() {}

// UnsafeDreamdatastreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DreamdatastreamServer will
// result in compilation errors.
type UnsafeDreamdatastreamServer interface {
	mustEmbedUnimplementedDreamdatastreamServer()
}

func RegisterDreamdatastreamServer(s grpc.ServiceRegistrar, srv DreamdatastreamServer) {
	s.RegisterService(&Dreamdatastream_ServiceDesc, srv)
}

func _Dreamdatastream_Data_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DreamdatastreamServer).Data(&dreamdatastreamDataServer{stream})
}

type Dreamdatastream_DataServer interface {
	Send(*ServerToClient) error
	Recv() (*ClientToServer, error)
	grpc.ServerStream
}

type dreamdatastreamDataServer struct {
	grpc.ServerStream
}

func (x *dreamdatastreamDataServer) Send(m *ServerToClient) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dreamdatastreamDataServer) Recv() (*ClientToServer, error) {
	m := new(ClientToServer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Dreamdatastream_ServiceDesc is the grpc.ServiceDesc for Dreamdatastream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dreamdatastream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dreamdatastream.dreamdatastream",
	HandlerType: (*DreamdatastreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "data",
			Handler:       _Dreamdatastream_Data_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/dreamengine.proto",
}
